package com.ble.lib.x2.proto;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bt_alg.proto

public final class BtAlg {
    private BtAlg() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    /**
     * Protobuf enum {@code bt_active_type}
     */
    public enum bt_active_type
            implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>oth_NOTWEAR = 0;</code>
         * <p/>
         * <pre>
         * not wear
         * </pre>
         */
        oth_NOTWEAR(0, 0),
        /**
         * <code>oth_CHARGE = 1;</code>
         * <p/>
         * <pre>
         * in charge
         * </pre>
         */
        oth_CHARGE(1, 1),
        /**
         * <code>nobo_LIGHT_SLEEP = 2;</code>
         * <p/>
         * <pre>
         * light sleeping
         * </pre>
         */
        nobo_LIGHT_SLEEP(2, 2),
        /**
         * <code>nobo_DEEP_SLEEP = 3;</code>
         * <p/>
         * <pre>
         * deep sleeping
         * </pre>
         */
        nobo_DEEP_SLEEP(3, 3),
        /**
         * <code>nobo_WAKE_UP = 4;</code>
         * <p/>
         * <pre>
         * waking up
         * </pre>
         */
        nobo_WAKE_UP(4, 4),
        /**
         * <code>nobo_QUIET = 5;</code>
         * <p/>
         * <pre>
         * still
         * </pre>
         */
        nobo_QUIET(5, 5),
        /**
         * <code>nobo_ALERT = 6;</code>
         * <p/>
         * <pre>
         * small motions
         * </pre>
         */
        nobo_ALERT(6, 6),
        /**
         * <code>nobo_MOVE = 7;</code>
         * <p/>
         * <pre>
         * moving
         * </pre>
         */
        nobo_MOVE(7, 7),
        /**
         * <code>nobo_VEHICLE = 8;</code>
         * <p/>
         * <pre>
         * driving
         * </pre>
         */
        nobo_VEHICLE(8, 8),
        /**
         * <code>bong_WARM_UP = 9;</code>
         * <p/>
         * <pre>
         * warm up
         * </pre>
         */
        bong_WARM_UP(9, 9),
        /**
         * <code>bong_WALK = 10;</code>
         * <p/>
         * <pre>
         * walking
         * </pre>
         */
        bong_WALK(10, 10),
        /**
         * <code>bong_RUN = 11;</code>
         * <p/>
         * <pre>
         * running
         * </pre>
         */
        bong_RUN(11, 11),
        /**
         * <code>bong_EXERCISE = 12;</code>
         * <p/>
         * <pre>
         * other sport
         * </pre>
         */
        bong_EXERCISE(12, 12),
        /**
         * <code>bong_SWIM = 13;</code>
         * <p/>
         * <pre>
         * swimming
         * </pre>
         */
        bong_SWIM(13, 13),
        /**
         * <code>bong_BICYCLE = 14;</code>
         * <p/>
         * <pre>
         * riding
         * </pre>
         */
        bong_BICYCLE(14, 14),
        /**
         * <code>FITNESS = 15;</code>
         * <p/>
         * <pre>
         *
         * </pre>
         */
        FITNESS(15, 15),
        /**
         * <code>BlANK = 200;</code>
         * <p/>
         * <pre>
         * Android &#64; qingguo&#64;bong.cn
         * </pre>
         */
        BlANK(16, 200),;

        /**
         * <code>oth_NOTWEAR = 0;</code>
         * <p/>
         * <pre>
         * not wear
         * </pre>
         */
        public static final int oth_NOTWEAR_VALUE = 0;
        /**
         * <code>oth_CHARGE = 1;</code>
         * <p/>
         * <pre>
         * in charge
         * </pre>
         */
        public static final int oth_CHARGE_VALUE = 1;
        /**
         * <code>nobo_LIGHT_SLEEP = 2;</code>
         * <p/>
         * <pre>
         * light sleeping
         * </pre>
         */
        public static final int nobo_LIGHT_SLEEP_VALUE = 2;
        /**
         * <code>nobo_DEEP_SLEEP = 3;</code>
         * <p/>
         * <pre>
         * deep sleeping
         * </pre>
         */
        public static final int nobo_DEEP_SLEEP_VALUE = 3;
        /**
         * <code>nobo_WAKE_UP = 4;</code>
         * <p/>
         * <pre>
         * waking up
         * </pre>
         */
        public static final int nobo_WAKE_UP_VALUE = 4;
        /**
         * <code>nobo_QUIET = 5;</code>
         * <p/>
         * <pre>
         * still
         * </pre>
         */
        public static final int nobo_QUIET_VALUE = 5;
        /**
         * <code>nobo_ALERT = 6;</code>
         * <p/>
         * <pre>
         * small motions
         * </pre>
         */
        public static final int nobo_ALERT_VALUE = 6;
        /**
         * <code>nobo_MOVE = 7;</code>
         * <p/>
         * <pre>
         * moving
         * </pre>
         */
        public static final int nobo_MOVE_VALUE = 7;
        /**
         * <code>nobo_VEHICLE = 8;</code>
         * <p/>
         * <pre>
         * driving
         * </pre>
         */
        public static final int nobo_VEHICLE_VALUE = 8;
        /**
         * <code>bong_WARM_UP = 9;</code>
         * <p/>
         * <pre>
         * warm up
         * </pre>
         */
        public static final int bong_WARM_UP_VALUE = 9;
        /**
         * <code>bong_WALK = 10;</code>
         * <p/>
         * <pre>
         * walking
         * </pre>
         */
        public static final int bong_WALK_VALUE = 10;
        /**
         * <code>bong_RUN = 11;</code>
         * <p/>
         * <pre>
         * running
         * </pre>
         */
        public static final int bong_RUN_VALUE = 11;
        /**
         * <code>bong_EXERCISE = 12;</code>
         * <p/>
         * <pre>
         * other sport
         * </pre>
         */
        public static final int bong_EXERCISE_VALUE = 12;
        /**
         * <code>bong_SWIM = 13;</code>
         * <p/>
         * <pre>
         * swimming
         * </pre>
         */
        public static final int bong_SWIM_VALUE = 13;
        /**
         * <code>bong_BICYCLE = 14;</code>
         * <p/>
         * <pre>
         * riding
         * </pre>
         */
        public static final int bong_BICYCLE_VALUE = 14;
        /**
         * <code>FITNESS = 15;</code>
         * <p/>
         * <pre>
         *
         * </pre>
         */
        public static final int FITNESS_VALUE = 15;
        /**
         * <code>BlANK = 200;</code>
         * <p/>
         * <pre>
         * Android &#64; qingguo&#64;bong.cn
         * </pre>
         */
        public static final int BlANK_VALUE = 200;


        public final int getNumber() {
            return value;
        }

        public static bt_active_type valueOf(int value) {
            switch (value) {
                case 0:
                    return oth_NOTWEAR;
                case 1:
                    return oth_CHARGE;
                case 2:
                    return nobo_LIGHT_SLEEP;
                case 3:
                    return nobo_DEEP_SLEEP;
                case 4:
                    return nobo_WAKE_UP;
                case 5:
                    return nobo_QUIET;
                case 6:
                    return nobo_ALERT;
                case 7:
                    return nobo_MOVE;
                case 8:
                    return nobo_VEHICLE;
                case 9:
                    return bong_WARM_UP;
                case 10:
                    return bong_WALK;
                case 11:
                    return bong_RUN;
                case 12:
                    return bong_EXERCISE;
                case 13:
                    return bong_SWIM;
                case 14:
                    return bong_BICYCLE;
                case 15:
                    return FITNESS;
                case 200:
                    return BlANK;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<bt_active_type>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<bt_active_type>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<bt_active_type>() {
                    public bt_active_type findValueByNumber(int number) {
                        return bt_active_type.valueOf(number);
                    }
                };

        private final int value;

        bt_active_type(int index, int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:bt_active_type)
    }

    /**
     * Protobuf enum {@code BT_SYSTEM_FLAG}
     */
    public enum BT_SYSTEM_FLAG
            implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>BONG = 1;</code>
         * <p/>
         * <pre>
         * 1 for bong 0 for not bong
         * </pre>
         */
        BONG(0, 1),
        /**
         * <code>CHARGE = 2;</code>
         * <p/>
         * <pre>
         * 2 for charge 0 for not charge
         * </pre>
         */
        CHARGE(1, 2),
        /**
         * <code>BLOCKREADY = 4;</code>
         * <p/>
         * <pre>
         * block ready = 1 not ready = 0
         * </pre>
         */
        BLOCKREADY(2, 4),
        /**
         * <code>CURVEREADY = 8;</code>
         * <p/>
         * <pre>
         * curve ready = 1 not ready = 0
         * </pre>
         */
        CURVEREADY(3, 8),
        /**
         * <code>WATER = 16;</code>
         * <p/>
         * <pre>
         * if water or not
         * </pre>
         */
        WATER(4, 16),
        /**
         * <code>FIXED = 4096;</code>
         * <p/>
         * <pre>
         * if the block fixed 1 = fixed 0 = unfixed
         * </pre>
         */
        FIXED(5, 4096),;

        /**
         * <code>BONG = 1;</code>
         * <p/>
         * <pre>
         * 1 for bong 0 for not bong
         * </pre>
         */
        public static final int BONG_VALUE = 1;
        /**
         * <code>CHARGE = 2;</code>
         * <p/>
         * <pre>
         * 2 for charge 0 for not charge
         * </pre>
         */
        public static final int CHARGE_VALUE = 2;
        /**
         * <code>BLOCKREADY = 4;</code>
         * <p/>
         * <pre>
         * block ready = 1 not ready = 0
         * </pre>
         */
        public static final int BLOCKREADY_VALUE = 4;
        /**
         * <code>CURVEREADY = 8;</code>
         * <p/>
         * <pre>
         * curve ready = 1 not ready = 0
         * </pre>
         */
        public static final int CURVEREADY_VALUE = 8;
        /**
         * <code>WATER = 16;</code>
         * <p/>
         * <pre>
         * if water or not
         * </pre>
         */
        public static final int WATER_VALUE = 16;
        /**
         * <code>FIXED = 4096;</code>
         * <p/>
         * <pre>
         * if the block fixed 1 = fixed 0 = unfixed
         * </pre>
         */
        public static final int FIXED_VALUE = 4096;


        public final int getNumber() {
            return value;
        }

        public static BT_SYSTEM_FLAG valueOf(int value) {
            switch (value) {
                case 1:
                    return BONG;
                case 2:
                    return CHARGE;
                case 4:
                    return BLOCKREADY;
                case 8:
                    return CURVEREADY;
                case 16:
                    return WATER;
                case 4096:
                    return FIXED;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<BT_SYSTEM_FLAG>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<BT_SYSTEM_FLAG>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<BT_SYSTEM_FLAG>() {
                    public BT_SYSTEM_FLAG findValueByNumber(int number) {
                        return BT_SYSTEM_FLAG.valueOf(number);
                    }
                };

        private final int value;

        BT_SYSTEM_FLAG(int index, int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:BT_SYSTEM_FLAG)
    }

    /**
     * Protobuf enum {@code BT_ALG_ERROR_CODE}
     */
    public enum BT_ALG_ERROR_CODE
            implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>SUCCESS = 0;</code>
         * <p/>
         * <pre>
         * </pre>
         */
        SUCCESS(0, 0),
        /**
         * <code>TIME_ERROR = 1;</code>
         * <p/>
         * <pre>
         * in charge
         * </pre>
         */
        TIME_ERROR(1, 1),
        /**
         * <code>DATA_END = 2;</code>
         * <p/>
         * <pre>
         * light sleepin
         * </pre>
         */
        DATA_END(2, 2),;

        /**
         * <code>SUCCESS = 0;</code>
         * <p/>
         * <pre>
         * </pre>
         */
        public static final int SUCCESS_VALUE = 0;
        /**
         * <code>TIME_ERROR = 1;</code>
         * <p/>
         * <pre>
         * in charge
         * </pre>
         */
        public static final int TIME_ERROR_VALUE = 1;
        /**
         * <code>DATA_END = 2;</code>
         * <p/>
         * <pre>
         * light sleepin
         * </pre>
         */
        public static final int DATA_END_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        public static BT_ALG_ERROR_CODE valueOf(int value) {
            switch (value) {
                case 0:
                    return SUCCESS;
                case 1:
                    return TIME_ERROR;
                case 2:
                    return DATA_END;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<BT_ALG_ERROR_CODE>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<BT_ALG_ERROR_CODE>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<BT_ALG_ERROR_CODE>() {
                    public BT_ALG_ERROR_CODE findValueByNumber(int number) {
                        return BT_ALG_ERROR_CODE.valueOf(number);
                    }
                };

        private final int value;

        BT_ALG_ERROR_CODE(int index, int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:BT_ALG_ERROR_CODE)
    }

    public interface bt_alg_reqOrBuilder extends
            // @@protoc_insertion_point(interface_extends:bt_alg_req)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional int64 start_time = 1;</code>
         */
        boolean hasStartTime();

        /**
         * <code>optional int64 start_time = 1;</code>
         */
        long getStartTime();

        /**
         * <code>optional int64 end_time = 2;</code>
         */
        boolean hasEndTime();

        /**
         * <code>optional int64 end_time = 2;</code>
         */
        long getEndTime();
    }

    /**
     * Protobuf type {@code bt_alg_req}
     */
    public static final class bt_alg_req extends
            com.google.protobuf.GeneratedMessageLite implements
            // @@protoc_insertion_point(message_implements:bt_alg_req)
            bt_alg_reqOrBuilder {
        // Use bt_alg_req.newBuilder() to construct.
        private bt_alg_req(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private bt_alg_req(boolean noInit) {
            this.unknownFields = com.google.protobuf.ByteString.EMPTY;
        }

        private static final bt_alg_req defaultInstance;

        public static bt_alg_req getDefaultInstance() {
            return defaultInstance;
        }

        public bt_alg_req getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.ByteString unknownFields;

        private bt_alg_req(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.ByteString.Output unknownFieldsOutput =
                    com.google.protobuf.ByteString.newOutput();
            com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
                    com.google.protobuf.CodedOutputStream.newInstance(
                            unknownFieldsOutput);
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            startTime_ = input.readInt64();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            endTime_ = input.readInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                try {
                    unknownFieldsCodedOutput.flush();
                } catch (java.io.IOException e) {
                    // Should not happen
                } finally {
                    unknownFields = unknownFieldsOutput.toByteString();
                }
                makeExtensionsImmutable();
            }
        }

        public static com.google.protobuf.Parser<bt_alg_req> PARSER =
                new com.google.protobuf.AbstractParser<bt_alg_req>() {
                    public bt_alg_req parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new bt_alg_req(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<bt_alg_req> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int START_TIME_FIELD_NUMBER = 1;
        private long startTime_;

        /**
         * <code>optional int64 start_time = 1;</code>
         */
        public boolean hasStartTime() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional int64 start_time = 1;</code>
         */
        public long getStartTime() {
            return startTime_;
        }

        public static final int END_TIME_FIELD_NUMBER = 2;
        private long endTime_;

        /**
         * <code>optional int64 end_time = 2;</code>
         */
        public boolean hasEndTime() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional int64 end_time = 2;</code>
         */
        public long getEndTime() {
            return endTime_;
        }

        private void initFields() {
            startTime_ = 0L;
            endTime_ = 0L;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt64(1, startTime_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt64(2, endTime_);
            }
            output.writeRawBytes(unknownFields);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(1, startTime_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(2, endTime_);
            }
            size += unknownFields.size();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static bt_alg_req parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static bt_alg_req parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static bt_alg_req parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static bt_alg_req parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static bt_alg_req parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static bt_alg_req parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static bt_alg_req parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static bt_alg_req parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static bt_alg_req parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static bt_alg_req parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(bt_alg_req prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        /**
         * Protobuf type {@code bt_alg_req}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        bt_alg_req, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:bt_alg_req)
                bt_alg_reqOrBuilder {
            // Construct using BtAlg.bt_alg_req.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                startTime_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000001);
                endTime_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public bt_alg_req getDefaultInstanceForType() {
                return bt_alg_req.getDefaultInstance();
            }

            public bt_alg_req build() {
                bt_alg_req result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public bt_alg_req buildPartial() {
                bt_alg_req result = new bt_alg_req(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.startTime_ = startTime_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.endTime_ = endTime_;
                result.bitField0_ = to_bitField0_;
                return result;
            }

            public Builder mergeFrom(bt_alg_req other) {
                if (other == bt_alg_req.getDefaultInstance()) return this;
                if (other.hasStartTime()) {
                    setStartTime(other.getStartTime());
                }
                if (other.hasEndTime()) {
                    setEndTime(other.getEndTime());
                }
                setUnknownFields(
                        getUnknownFields().concat(other.unknownFields));
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                bt_alg_req parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (bt_alg_req) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private long startTime_;

            /**
             * <code>optional int64 start_time = 1;</code>
             */
            public boolean hasStartTime() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional int64 start_time = 1;</code>
             */
            public long getStartTime() {
                return startTime_;
            }

            /**
             * <code>optional int64 start_time = 1;</code>
             */
            public Builder setStartTime(long value) {
                bitField0_ |= 0x00000001;
                startTime_ = value;

                return this;
            }

            /**
             * <code>optional int64 start_time = 1;</code>
             */
            public Builder clearStartTime() {
                bitField0_ = (bitField0_ & ~0x00000001);
                startTime_ = 0L;

                return this;
            }

            private long endTime_;

            /**
             * <code>optional int64 end_time = 2;</code>
             */
            public boolean hasEndTime() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional int64 end_time = 2;</code>
             */
            public long getEndTime() {
                return endTime_;
            }

            /**
             * <code>optional int64 end_time = 2;</code>
             */
            public Builder setEndTime(long value) {
                bitField0_ |= 0x00000002;
                endTime_ = value;

                return this;
            }

            /**
             * <code>optional int64 end_time = 2;</code>
             */
            public Builder clearEndTime() {
                bitField0_ = (bitField0_ & ~0x00000002);
                endTime_ = 0L;

                return this;
            }

            // @@protoc_insertion_point(builder_scope:bt_alg_req)
        }

        static {
            defaultInstance = new bt_alg_req(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:bt_alg_req)
    }

    public interface bt_alg_rspOrBuilder extends
            // @@protoc_insertion_point(interface_extends:bt_alg_rsp)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>repeated .bt_block block = 1;</code>
         * <p/>
         * <pre>
         * response block data
         * </pre>
         */
        java.util.List<bt_block>
        getBlockList();

        /**
         * <code>repeated .bt_block block = 1;</code>
         * <p/>
         * <pre>
         * response block data
         * </pre>
         */
        bt_block getBlock(int index);

        /**
         * <code>repeated .bt_block block = 1;</code>
         * <p/>
         * <pre>
         * response block data
         * </pre>
         */
        int getBlockCount();

        /**
         * <code>repeated .bt_curve curve = 2;</code>
         * <p/>
         * <pre>
         * response curve data
         * </pre>
         */
        java.util.List<bt_curve>
        getCurveList();

        /**
         * <code>repeated .bt_curve curve = 2;</code>
         * <p/>
         * <pre>
         * response curve data
         * </pre>
         */
        bt_curve getCurve(int index);

        /**
         * <code>repeated .bt_curve curve = 2;</code>
         * <p/>
         * <pre>
         * response curve data
         * </pre>
         */
        int getCurveCount();

        /**
         * <code>optional .BT_ALG_ERROR_CODE error_code = 3;</code>
         * <p/>
         * <pre>
         * response error code, 0: success end,1:no data,2:bad parameters
         * </pre>
         */
        boolean hasErrorCode();

        /**
         * <code>optional .BT_ALG_ERROR_CODE error_code = 3;</code>
         * <p/>
         * <pre>
         * response error code, 0: success end,1:no data,2:bad parameters
         * </pre>
         */
        BT_ALG_ERROR_CODE getErrorCode();
    }

    /**
     * Protobuf type {@code bt_alg_rsp}
     */
    public static final class bt_alg_rsp extends
            com.google.protobuf.GeneratedMessageLite implements
            // @@protoc_insertion_point(message_implements:bt_alg_rsp)
            bt_alg_rspOrBuilder {
        // Use bt_alg_rsp.newBuilder() to construct.
        private bt_alg_rsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private bt_alg_rsp(boolean noInit) {
            this.unknownFields = com.google.protobuf.ByteString.EMPTY;
        }

        private static final bt_alg_rsp defaultInstance;

        public static bt_alg_rsp getDefaultInstance() {
            return defaultInstance;
        }

        public bt_alg_rsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.ByteString unknownFields;

        private bt_alg_rsp(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.ByteString.Output unknownFieldsOutput =
                    com.google.protobuf.ByteString.newOutput();
            com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
                    com.google.protobuf.CodedOutputStream.newInstance(
                            unknownFieldsOutput);
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                block_ = new java.util.ArrayList<bt_block>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            block_.add(input.readMessage(bt_block.PARSER, extensionRegistry));
                            break;
                        }
                        case 18: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                curve_ = new java.util.ArrayList<bt_curve>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            curve_.add(input.readMessage(bt_curve.PARSER, extensionRegistry));
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            BT_ALG_ERROR_CODE value = BT_ALG_ERROR_CODE.valueOf(rawValue);
                            if (value == null) {
                                unknownFieldsCodedOutput.writeRawVarint32(tag);
                                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
                            } else {
                                bitField0_ |= 0x00000001;
                                errorCode_ = value;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    block_ = java.util.Collections.unmodifiableList(block_);
                }
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    curve_ = java.util.Collections.unmodifiableList(curve_);
                }
                try {
                    unknownFieldsCodedOutput.flush();
                } catch (java.io.IOException e) {
                    // Should not happen
                } finally {
                    unknownFields = unknownFieldsOutput.toByteString();
                }
                makeExtensionsImmutable();
            }
        }

        public static com.google.protobuf.Parser<bt_alg_rsp> PARSER =
                new com.google.protobuf.AbstractParser<bt_alg_rsp>() {
                    public bt_alg_rsp parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new bt_alg_rsp(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<bt_alg_rsp> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int BLOCK_FIELD_NUMBER = 1;
        private java.util.List<bt_block> block_;

        /**
         * <code>repeated .bt_block block = 1;</code>
         * <p/>
         * <pre>
         * response block data
         * </pre>
         */
        public java.util.List<bt_block> getBlockList() {
            return block_;
        }

        /**
         * <code>repeated .bt_block block = 1;</code>
         * <p/>
         * <pre>
         * response block data
         * </pre>
         */
        public java.util.List<? extends bt_blockOrBuilder>
        getBlockOrBuilderList() {
            return block_;
        }

        /**
         * <code>repeated .bt_block block = 1;</code>
         * <p/>
         * <pre>
         * response block data
         * </pre>
         */
        public int getBlockCount() {
            return block_.size();
        }

        /**
         * <code>repeated .bt_block block = 1;</code>
         * <p/>
         * <pre>
         * response block data
         * </pre>
         */
        public bt_block getBlock(int index) {
            return block_.get(index);
        }

        /**
         * <code>repeated .bt_block block = 1;</code>
         * <p/>
         * <pre>
         * response block data
         * </pre>
         */
        public bt_blockOrBuilder getBlockOrBuilder(
                int index) {
            return block_.get(index);
        }

        public static final int CURVE_FIELD_NUMBER = 2;
        private java.util.List<bt_curve> curve_;

        /**
         * <code>repeated .bt_curve curve = 2;</code>
         * <p/>
         * <pre>
         * response curve data
         * </pre>
         */
        public java.util.List<bt_curve> getCurveList() {
            return curve_;
        }

        /**
         * <code>repeated .bt_curve curve = 2;</code>
         * <p/>
         * <pre>
         * response curve data
         * </pre>
         */
        public java.util.List<? extends bt_curveOrBuilder>
        getCurveOrBuilderList() {
            return curve_;
        }

        /**
         * <code>repeated .bt_curve curve = 2;</code>
         * <p/>
         * <pre>
         * response curve data
         * </pre>
         */
        public int getCurveCount() {
            return curve_.size();
        }

        /**
         * <code>repeated .bt_curve curve = 2;</code>
         * <p/>
         * <pre>
         * response curve data
         * </pre>
         */
        public bt_curve getCurve(int index) {
            return curve_.get(index);
        }

        /**
         * <code>repeated .bt_curve curve = 2;</code>
         * <p/>
         * <pre>
         * response curve data
         * </pre>
         */
        public bt_curveOrBuilder getCurveOrBuilder(
                int index) {
            return curve_.get(index);
        }

        public static final int ERROR_CODE_FIELD_NUMBER = 3;
        private BT_ALG_ERROR_CODE errorCode_;

        /**
         * <code>optional .BT_ALG_ERROR_CODE error_code = 3;</code>
         * <p/>
         * <pre>
         * response error code, 0: success end,1:no data,2:bad parameters
         * </pre>
         */
        public boolean hasErrorCode() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional .BT_ALG_ERROR_CODE error_code = 3;</code>
         * <p/>
         * <pre>
         * response error code, 0: success end,1:no data,2:bad parameters
         * </pre>
         */
        public BT_ALG_ERROR_CODE getErrorCode() {
            return errorCode_;
        }

        private void initFields() {
            block_ = java.util.Collections.emptyList();
            curve_ = java.util.Collections.emptyList();
            errorCode_ = BT_ALG_ERROR_CODE.SUCCESS;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            for (int i = 0; i < block_.size(); i++) {
                output.writeMessage(1, block_.get(i));
            }
            for (int i = 0; i < curve_.size(); i++) {
                output.writeMessage(2, curve_.get(i));
            }
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeEnum(3, errorCode_.getNumber());
            }
            output.writeRawBytes(unknownFields);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < block_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, block_.get(i));
            }
            for (int i = 0; i < curve_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, curve_.get(i));
            }
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(3, errorCode_.getNumber());
            }
            size += unknownFields.size();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static bt_alg_rsp parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static bt_alg_rsp parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static bt_alg_rsp parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static bt_alg_rsp parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static bt_alg_rsp parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static bt_alg_rsp parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static bt_alg_rsp parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static bt_alg_rsp parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static bt_alg_rsp parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static bt_alg_rsp parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(bt_alg_rsp prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        /**
         * Protobuf type {@code bt_alg_rsp}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        bt_alg_rsp, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:bt_alg_rsp)
                bt_alg_rspOrBuilder {
            // Construct using BtAlg.bt_alg_rsp.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                block_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
                curve_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                errorCode_ = BT_ALG_ERROR_CODE.SUCCESS;
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public bt_alg_rsp getDefaultInstanceForType() {
                return bt_alg_rsp.getDefaultInstance();
            }

            public bt_alg_rsp build() {
                bt_alg_rsp result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public bt_alg_rsp buildPartial() {
                bt_alg_rsp result = new bt_alg_rsp(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    block_ = java.util.Collections.unmodifiableList(block_);
                    bitField0_ = (bitField0_ & ~0x00000001);
                }
                result.block_ = block_;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    curve_ = java.util.Collections.unmodifiableList(curve_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.curve_ = curve_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.errorCode_ = errorCode_;
                result.bitField0_ = to_bitField0_;
                return result;
            }

            public Builder mergeFrom(bt_alg_rsp other) {
                if (other == bt_alg_rsp.getDefaultInstance()) return this;
                if (!other.block_.isEmpty()) {
                    if (block_.isEmpty()) {
                        block_ = other.block_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                    } else {
                        ensureBlockIsMutable();
                        block_.addAll(other.block_);
                    }

                }
                if (!other.curve_.isEmpty()) {
                    if (curve_.isEmpty()) {
                        curve_ = other.curve_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureCurveIsMutable();
                        curve_.addAll(other.curve_);
                    }

                }
                if (other.hasErrorCode()) {
                    setErrorCode(other.getErrorCode());
                }
                setUnknownFields(
                        getUnknownFields().concat(other.unknownFields));
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                bt_alg_rsp parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (bt_alg_rsp) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<bt_block> block_ =
                    java.util.Collections.emptyList();

            private void ensureBlockIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    block_ = new java.util.ArrayList<bt_block>(block_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public java.util.List<bt_block> getBlockList() {
                return java.util.Collections.unmodifiableList(block_);
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public int getBlockCount() {
                return block_.size();
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public bt_block getBlock(int index) {
                return block_.get(index);
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder setBlock(
                    int index, bt_block value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureBlockIsMutable();
                block_.set(index, value);

                return this;
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder setBlock(
                    int index, bt_block.Builder builderForValue) {
                ensureBlockIsMutable();
                block_.set(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder addBlock(bt_block value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureBlockIsMutable();
                block_.add(value);

                return this;
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder addBlock(
                    int index, bt_block value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureBlockIsMutable();
                block_.add(index, value);

                return this;
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder addBlock(
                    bt_block.Builder builderForValue) {
                ensureBlockIsMutable();
                block_.add(builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder addBlock(
                    int index, bt_block.Builder builderForValue) {
                ensureBlockIsMutable();
                block_.add(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder addAllBlock(
                    Iterable<? extends bt_block> values) {
                ensureBlockIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, block_);

                return this;
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder clearBlock() {
                block_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);

                return this;
            }

            /**
             * <code>repeated .bt_block block = 1;</code>
             * <p/>
             * <pre>
             * response block data
             * </pre>
             */
            public Builder removeBlock(int index) {
                ensureBlockIsMutable();
                block_.remove(index);

                return this;
            }

            private java.util.List<bt_curve> curve_ =
                    java.util.Collections.emptyList();

            private void ensureCurveIsMutable() {
                if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                    curve_ = new java.util.ArrayList<bt_curve>(curve_);
                    bitField0_ |= 0x00000002;
                }
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public java.util.List<bt_curve> getCurveList() {
                return java.util.Collections.unmodifiableList(curve_);
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public int getCurveCount() {
                return curve_.size();
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public bt_curve getCurve(int index) {
                return curve_.get(index);
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder setCurve(
                    int index, bt_curve value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCurveIsMutable();
                curve_.set(index, value);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder setCurve(
                    int index, bt_curve.Builder builderForValue) {
                ensureCurveIsMutable();
                curve_.set(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder addCurve(bt_curve value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCurveIsMutable();
                curve_.add(value);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder addCurve(
                    int index, bt_curve value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCurveIsMutable();
                curve_.add(index, value);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder addCurve(
                    bt_curve.Builder builderForValue) {
                ensureCurveIsMutable();
                curve_.add(builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder addCurve(
                    int index, bt_curve.Builder builderForValue) {
                ensureCurveIsMutable();
                curve_.add(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder addAllCurve(
                    Iterable<? extends bt_curve> values) {
                ensureCurveIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, curve_);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder clearCurve() {
                curve_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 2;</code>
             * <p/>
             * <pre>
             * response curve data
             * </pre>
             */
            public Builder removeCurve(int index) {
                ensureCurveIsMutable();
                curve_.remove(index);

                return this;
            }

            private BT_ALG_ERROR_CODE errorCode_ = BT_ALG_ERROR_CODE.SUCCESS;

            /**
             * <code>optional .BT_ALG_ERROR_CODE error_code = 3;</code>
             * <p/>
             * <pre>
             * response error code, 0: success end,1:no data,2:bad parameters
             * </pre>
             */
            public boolean hasErrorCode() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .BT_ALG_ERROR_CODE error_code = 3;</code>
             * <p/>
             * <pre>
             * response error code, 0: success end,1:no data,2:bad parameters
             * </pre>
             */
            public BT_ALG_ERROR_CODE getErrorCode() {
                return errorCode_;
            }

            /**
             * <code>optional .BT_ALG_ERROR_CODE error_code = 3;</code>
             * <p/>
             * <pre>
             * response error code, 0: success end,1:no data,2:bad parameters
             * </pre>
             */
            public Builder setErrorCode(BT_ALG_ERROR_CODE value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                errorCode_ = value;

                return this;
            }

            /**
             * <code>optional .BT_ALG_ERROR_CODE error_code = 3;</code>
             * <p/>
             * <pre>
             * response error code, 0: success end,1:no data,2:bad parameters
             * </pre>
             */
            public Builder clearErrorCode() {
                bitField0_ = (bitField0_ & ~0x00000004);
                errorCode_ = BT_ALG_ERROR_CODE.SUCCESS;

                return this;
            }

            // @@protoc_insertion_point(builder_scope:bt_alg_rsp)
        }

        static {
            defaultInstance = new bt_alg_rsp(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:bt_alg_rsp)
    }

    public interface curves_stringOrBuilder extends
            // @@protoc_insertion_point(interface_extends:curves_string)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>repeated .bt_curve curve = 1;</code>
         */
        java.util.List<bt_curve>
        getCurveList();

        /**
         * <code>repeated .bt_curve curve = 1;</code>
         */
        bt_curve getCurve(int index);

        /**
         * <code>repeated .bt_curve curve = 1;</code>
         */
        int getCurveCount();
    }

    /**
     * Protobuf type {@code curves_string}
     */
    public static final class curves_string extends
            com.google.protobuf.GeneratedMessageLite implements
            // @@protoc_insertion_point(message_implements:curves_string)
            curves_stringOrBuilder {
        // Use curves_string.newBuilder() to construct.
        private curves_string(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private curves_string(boolean noInit) {
            this.unknownFields = com.google.protobuf.ByteString.EMPTY;
        }

        private static final curves_string defaultInstance;

        public static curves_string getDefaultInstance() {
            return defaultInstance;
        }

        public curves_string getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.ByteString unknownFields;

        private curves_string(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.ByteString.Output unknownFieldsOutput =
                    com.google.protobuf.ByteString.newOutput();
            com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
                    com.google.protobuf.CodedOutputStream.newInstance(
                            unknownFieldsOutput);
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                curve_ = new java.util.ArrayList<bt_curve>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            curve_.add(input.readMessage(bt_curve.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    curve_ = java.util.Collections.unmodifiableList(curve_);
                }
                try {
                    unknownFieldsCodedOutput.flush();
                } catch (java.io.IOException e) {
                    // Should not happen
                } finally {
                    unknownFields = unknownFieldsOutput.toByteString();
                }
                makeExtensionsImmutable();
            }
        }

        public static com.google.protobuf.Parser<curves_string> PARSER =
                new com.google.protobuf.AbstractParser<curves_string>() {
                    public curves_string parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new curves_string(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<curves_string> getParserForType() {
            return PARSER;
        }

        public static final int CURVE_FIELD_NUMBER = 1;
        private java.util.List<bt_curve> curve_;

        /**
         * <code>repeated .bt_curve curve = 1;</code>
         */
        public java.util.List<bt_curve> getCurveList() {
            return curve_;
        }

        /**
         * <code>repeated .bt_curve curve = 1;</code>
         */
        public java.util.List<? extends bt_curveOrBuilder>
        getCurveOrBuilderList() {
            return curve_;
        }

        /**
         * <code>repeated .bt_curve curve = 1;</code>
         */
        public int getCurveCount() {
            return curve_.size();
        }

        /**
         * <code>repeated .bt_curve curve = 1;</code>
         */
        public bt_curve getCurve(int index) {
            return curve_.get(index);
        }

        /**
         * <code>repeated .bt_curve curve = 1;</code>
         */
        public bt_curveOrBuilder getCurveOrBuilder(
                int index) {
            return curve_.get(index);
        }

        private void initFields() {
            curve_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            for (int i = 0; i < curve_.size(); i++) {
                output.writeMessage(1, curve_.get(i));
            }
            output.writeRawBytes(unknownFields);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < curve_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, curve_.get(i));
            }
            size += unknownFields.size();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static curves_string parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static curves_string parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static curves_string parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static curves_string parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static curves_string parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static curves_string parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static curves_string parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static curves_string parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static curves_string parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static curves_string parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(curves_string prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        /**
         * Protobuf type {@code curves_string}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        curves_string, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:curves_string)
                curves_stringOrBuilder {
            // Construct using BtAlg.curves_string.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                curve_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public curves_string getDefaultInstanceForType() {
                return curves_string.getDefaultInstance();
            }

            public curves_string build() {
                curves_string result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public curves_string buildPartial() {
                curves_string result = new curves_string(this);
                int from_bitField0_ = bitField0_;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    curve_ = java.util.Collections.unmodifiableList(curve_);
                    bitField0_ = (bitField0_ & ~0x00000001);
                }
                result.curve_ = curve_;
                return result;
            }

            public Builder mergeFrom(curves_string other) {
                if (other == curves_string.getDefaultInstance()) return this;
                if (!other.curve_.isEmpty()) {
                    if (curve_.isEmpty()) {
                        curve_ = other.curve_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                    } else {
                        ensureCurveIsMutable();
                        curve_.addAll(other.curve_);
                    }

                }
                setUnknownFields(
                        getUnknownFields().concat(other.unknownFields));
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                curves_string parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (curves_string) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<bt_curve> curve_ =
                    java.util.Collections.emptyList();

            private void ensureCurveIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    curve_ = new java.util.ArrayList<bt_curve>(curve_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public java.util.List<bt_curve> getCurveList() {
                return java.util.Collections.unmodifiableList(curve_);
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public int getCurveCount() {
                return curve_.size();
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public bt_curve getCurve(int index) {
                return curve_.get(index);
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder setCurve(
                    int index, bt_curve value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCurveIsMutable();
                curve_.set(index, value);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder setCurve(
                    int index, bt_curve.Builder builderForValue) {
                ensureCurveIsMutable();
                curve_.set(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder addCurve(bt_curve value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCurveIsMutable();
                curve_.add(value);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder addCurve(
                    int index, bt_curve value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureCurveIsMutable();
                curve_.add(index, value);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder addCurve(
                    bt_curve.Builder builderForValue) {
                ensureCurveIsMutable();
                curve_.add(builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder addCurve(
                    int index, bt_curve.Builder builderForValue) {
                ensureCurveIsMutable();
                curve_.add(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder addAllCurve(
                    Iterable<? extends bt_curve> values) {
                ensureCurveIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, curve_);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder clearCurve() {
                curve_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);

                return this;
            }

            /**
             * <code>repeated .bt_curve curve = 1;</code>
             */
            public Builder removeCurve(int index) {
                ensureCurveIsMutable();
                curve_.remove(index);

                return this;
            }

            // @@protoc_insertion_point(builder_scope:curves_string)
        }

        static {
            defaultInstance = new curves_string(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:curves_string)
    }

    public interface bt_blockOrBuilder extends
            // @@protoc_insertion_point(interface_extends:bt_block)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional int64 start_time = 1;</code>
         * <p/>
         * <pre>
         * end time time stamp for this blcok (seconds)
         * </pre>
         */
        boolean hasStartTime();

        /**
         * <code>optional int64 start_time = 1;</code>
         * <p/>
         * <pre>
         * end time time stamp for this blcok (seconds)
         * </pre>
         */
        long getStartTime();

        /**
         * <code>optional int64 end_time = 2;</code>
         * <p/>
         * <pre>
         * block duration (seconds)
         * </pre>
         */
        boolean hasEndTime();

        /**
         * <code>optional int64 end_time = 2;</code>
         * <p/>
         * <pre>
         * block duration (seconds)
         * </pre>
         */
        long getEndTime();

        /**
         * <code>optional .bt_active_type present_type = 3;</code>
         * <p/>
         * <pre>
         * present type
         * </pre>
         */
        boolean hasPresentType();

        /**
         * <code>optional .bt_active_type present_type = 3;</code>
         * <p/>
         * <pre>
         * present type
         * </pre>
         */
        bt_active_type getPresentType();

        /**
         * <code>optional uint32 energy = 4;</code>
         * <p/>
         * <pre>
         * energy
         * </pre>
         */
        boolean hasEnergy();

        /**
         * <code>optional uint32 energy = 4;</code>
         * <p/>
         * <pre>
         * energy
         * </pre>
         */
        int getEnergy();

        /**
         * <code>optional uint32 steps = 5;</code>
         * <p/>
         * <pre>
         * steps
         * </pre>
         */
        boolean hasSteps();

        /**
         * <code>optional uint32 steps = 5;</code>
         * <p/>
         * <pre>
         * steps
         * </pre>
         */
        int getSteps();

        /**
         * <code>optional uint32 distance = 6;</code>
         * <p/>
         * <pre>
         * distances
         * </pre>
         */
        boolean hasDistance();

        /**
         * <code>optional uint32 distance = 6;</code>
         * <p/>
         * <pre>
         * distances
         * </pre>
         */
        int getDistance();

        /**
         * <code>optional uint32 swings = 7;</code>
         * <p/>
         * <pre>
         * swings
         * </pre>
         */
        boolean hasSwings();

        /**
         * <code>optional uint32 swings = 7;</code>
         * <p/>
         * <pre>
         * swings
         * </pre>
         */
        int getSwings();

        /**
         * <code>optional uint32 cycles = 8;</code>
         * <p/>
         * <pre>
         * cycles
         * </pre>
         */
        boolean hasCycles();

        /**
         * <code>optional uint32 cycles = 8;</code>
         * <p/>
         * <pre>
         * cycles
         * </pre>
         */
        int getCycles();

        /**
         * <code>optional uint32 system_flag = 9;</code>
         * <p/>
         * <pre>
         * bong or not charge or not
         * </pre>
         */
        boolean hasSystemFlag();

        /**
         * <code>optional uint32 system_flag = 9;</code>
         * <p/>
         * <pre>
         * bong or not charge or not
         * </pre>
         */
        int getSystemFlag();
    }

    /**
     * Protobuf type {@code bt_block}
     */
    public static final class bt_block extends
            com.google.protobuf.GeneratedMessageLite implements
            // @@protoc_insertion_point(message_implements:bt_block)
            bt_blockOrBuilder {
        // Use bt_block.newBuilder() to construct.
        private bt_block(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private bt_block(boolean noInit) {
            this.unknownFields = com.google.protobuf.ByteString.EMPTY;
        }

        private static final bt_block defaultInstance;

        public static bt_block getDefaultInstance() {
            return defaultInstance;
        }

        public bt_block getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.ByteString unknownFields;

        private bt_block(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.ByteString.Output unknownFieldsOutput =
                    com.google.protobuf.ByteString.newOutput();
            com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
                    com.google.protobuf.CodedOutputStream.newInstance(
                            unknownFieldsOutput);
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            startTime_ = input.readInt64();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            endTime_ = input.readInt64();
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            bt_active_type value = bt_active_type.valueOf(rawValue);
                            if (value == null) {
                                unknownFieldsCodedOutput.writeRawVarint32(tag);
                                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
                            } else {
                                bitField0_ |= 0x00000004;
                                presentType_ = value;
                            }
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            energy_ = input.readUInt32();
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            steps_ = input.readUInt32();
                            break;
                        }
                        case 48: {
                            bitField0_ |= 0x00000020;
                            distance_ = input.readUInt32();
                            break;
                        }
                        case 56: {
                            bitField0_ |= 0x00000040;
                            swings_ = input.readUInt32();
                            break;
                        }
                        case 64: {
                            bitField0_ |= 0x00000080;
                            cycles_ = input.readUInt32();
                            break;
                        }
                        case 72: {
                            bitField0_ |= 0x00000100;
                            systemFlag_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                try {
                    unknownFieldsCodedOutput.flush();
                } catch (java.io.IOException e) {
                    // Should not happen
                } finally {
                    unknownFields = unknownFieldsOutput.toByteString();
                }
                makeExtensionsImmutable();
            }
        }

        public static com.google.protobuf.Parser<bt_block> PARSER =
                new com.google.protobuf.AbstractParser<bt_block>() {
                    public bt_block parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new bt_block(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<bt_block> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int START_TIME_FIELD_NUMBER = 1;
        private long startTime_;

        /**
         * <code>optional int64 start_time = 1;</code>
         * <p/>
         * <pre>
         * end time time stamp for this blcok (seconds)
         * </pre>
         */
        public boolean hasStartTime() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional int64 start_time = 1;</code>
         * <p/>
         * <pre>
         * end time time stamp for this blcok (seconds)
         * </pre>
         */
        public long getStartTime() {
            return startTime_;
        }

        public static final int END_TIME_FIELD_NUMBER = 2;
        private long endTime_;

        /**
         * <code>optional int64 end_time = 2;</code>
         * <p/>
         * <pre>
         * block duration (seconds)
         * </pre>
         */
        public boolean hasEndTime() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional int64 end_time = 2;</code>
         * <p/>
         * <pre>
         * block duration (seconds)
         * </pre>
         */
        public long getEndTime() {
            return endTime_;
        }

        public static final int PRESENT_TYPE_FIELD_NUMBER = 3;
        private bt_active_type presentType_;

        /**
         * <code>optional .bt_active_type present_type = 3;</code>
         * <p/>
         * <pre>
         * present type
         * </pre>
         */
        public boolean hasPresentType() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .bt_active_type present_type = 3;</code>
         * <p/>
         * <pre>
         * present type
         * </pre>
         */
        public bt_active_type getPresentType() {
            return presentType_;
        }

        public static final int ENERGY_FIELD_NUMBER = 4;
        private int energy_;

        /**
         * <code>optional uint32 energy = 4;</code>
         * <p/>
         * <pre>
         * energy
         * </pre>
         */
        public boolean hasEnergy() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional uint32 energy = 4;</code>
         * <p/>
         * <pre>
         * energy
         * </pre>
         */
        public int getEnergy() {
            return energy_;
        }

        public static final int STEPS_FIELD_NUMBER = 5;
        private int steps_;

        /**
         * <code>optional uint32 steps = 5;</code>
         * <p/>
         * <pre>
         * steps
         * </pre>
         */
        public boolean hasSteps() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional uint32 steps = 5;</code>
         * <p/>
         * <pre>
         * steps
         * </pre>
         */
        public int getSteps() {
            return steps_;
        }

        public static final int DISTANCE_FIELD_NUMBER = 6;
        private int distance_;

        /**
         * <code>optional uint32 distance = 6;</code>
         * <p/>
         * <pre>
         * distances
         * </pre>
         */
        public boolean hasDistance() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional uint32 distance = 6;</code>
         * <p/>
         * <pre>
         * distances
         * </pre>
         */
        public int getDistance() {
            return distance_;
        }

        public static final int SWINGS_FIELD_NUMBER = 7;
        private int swings_;

        /**
         * <code>optional uint32 swings = 7;</code>
         * <p/>
         * <pre>
         * swings
         * </pre>
         */
        public boolean hasSwings() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>optional uint32 swings = 7;</code>
         * <p/>
         * <pre>
         * swings
         * </pre>
         */
        public int getSwings() {
            return swings_;
        }

        public static final int CYCLES_FIELD_NUMBER = 8;
        private int cycles_;

        /**
         * <code>optional uint32 cycles = 8;</code>
         * <p/>
         * <pre>
         * cycles
         * </pre>
         */
        public boolean hasCycles() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional uint32 cycles = 8;</code>
         * <p/>
         * <pre>
         * cycles
         * </pre>
         */
        public int getCycles() {
            return cycles_;
        }

        public static final int SYSTEM_FLAG_FIELD_NUMBER = 9;
        private int systemFlag_;

        /**
         * <code>optional uint32 system_flag = 9;</code>
         * <p/>
         * <pre>
         * bong or not charge or not
         * </pre>
         */
        public boolean hasSystemFlag() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>optional uint32 system_flag = 9;</code>
         * <p/>
         * <pre>
         * bong or not charge or not
         * </pre>
         */
        public int getSystemFlag() {
            return systemFlag_;
        }

        private void initFields() {
            startTime_ = 0L;
            endTime_ = 0L;
            presentType_ = bt_active_type.oth_NOTWEAR;
            energy_ = 0;
            steps_ = 0;
            distance_ = 0;
            swings_ = 0;
            cycles_ = 0;
            systemFlag_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt64(1, startTime_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt64(2, endTime_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeEnum(3, presentType_.getNumber());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeUInt32(4, energy_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeUInt32(5, steps_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeUInt32(6, distance_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeUInt32(7, swings_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeUInt32(8, cycles_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeUInt32(9, systemFlag_);
            }
            output.writeRawBytes(unknownFields);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(1, startTime_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(2, endTime_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(3, presentType_.getNumber());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, energy_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(5, steps_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(6, distance_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(7, swings_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(8, cycles_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(9, systemFlag_);
            }
            size += unknownFields.size();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static bt_block parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static bt_block parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static bt_block parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static bt_block parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static bt_block parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static bt_block parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static bt_block parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static bt_block parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static bt_block parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static bt_block parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(bt_block prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        /**
         * Protobuf type {@code bt_block}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        bt_block, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:bt_block)
                bt_blockOrBuilder {
            // Construct using BtAlg.bt_block.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                startTime_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000001);
                endTime_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000002);
                presentType_ = bt_active_type.oth_NOTWEAR;
                bitField0_ = (bitField0_ & ~0x00000004);
                energy_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                steps_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                distance_ = 0;
                bitField0_ = (bitField0_ & ~0x00000020);
                swings_ = 0;
                bitField0_ = (bitField0_ & ~0x00000040);
                cycles_ = 0;
                bitField0_ = (bitField0_ & ~0x00000080);
                systemFlag_ = 0;
                bitField0_ = (bitField0_ & ~0x00000100);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public bt_block getDefaultInstanceForType() {
                return bt_block.getDefaultInstance();
            }

            public bt_block build() {
                bt_block result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public bt_block buildPartial() {
                bt_block result = new bt_block(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.startTime_ = startTime_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.endTime_ = endTime_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.presentType_ = presentType_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.energy_ = energy_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.steps_ = steps_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.distance_ = distance_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.swings_ = swings_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.cycles_ = cycles_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.systemFlag_ = systemFlag_;
                result.bitField0_ = to_bitField0_;
                return result;
            }

            public Builder mergeFrom(bt_block other) {
                if (other == bt_block.getDefaultInstance()) return this;
                if (other.hasStartTime()) {
                    setStartTime(other.getStartTime());
                }
                if (other.hasEndTime()) {
                    setEndTime(other.getEndTime());
                }
                if (other.hasPresentType()) {
                    setPresentType(other.getPresentType());
                }
                if (other.hasEnergy()) {
                    setEnergy(other.getEnergy());
                }
                if (other.hasSteps()) {
                    setSteps(other.getSteps());
                }
                if (other.hasDistance()) {
                    setDistance(other.getDistance());
                }
                if (other.hasSwings()) {
                    setSwings(other.getSwings());
                }
                if (other.hasCycles()) {
                    setCycles(other.getCycles());
                }
                if (other.hasSystemFlag()) {
                    setSystemFlag(other.getSystemFlag());
                }
                setUnknownFields(
                        getUnknownFields().concat(other.unknownFields));
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                bt_block parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (bt_block) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private long startTime_;

            /**
             * <code>optional int64 start_time = 1;</code>
             * <p/>
             * <pre>
             * end time time stamp for this blcok (seconds)
             * </pre>
             */
            public boolean hasStartTime() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional int64 start_time = 1;</code>
             * <p/>
             * <pre>
             * end time time stamp for this blcok (seconds)
             * </pre>
             */
            public long getStartTime() {
                return startTime_;
            }

            /**
             * <code>optional int64 start_time = 1;</code>
             * <p/>
             * <pre>
             * end time time stamp for this blcok (seconds)
             * </pre>
             */
            public Builder setStartTime(long value) {
                bitField0_ |= 0x00000001;
                startTime_ = value;

                return this;
            }

            /**
             * <code>optional int64 start_time = 1;</code>
             * <p/>
             * <pre>
             * end time time stamp for this blcok (seconds)
             * </pre>
             */
            public Builder clearStartTime() {
                bitField0_ = (bitField0_ & ~0x00000001);
                startTime_ = 0L;

                return this;
            }

            private long endTime_;

            /**
             * <code>optional int64 end_time = 2;</code>
             * <p/>
             * <pre>
             * block duration (seconds)
             * </pre>
             */
            public boolean hasEndTime() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional int64 end_time = 2;</code>
             * <p/>
             * <pre>
             * block duration (seconds)
             * </pre>
             */
            public long getEndTime() {
                return endTime_;
            }

            /**
             * <code>optional int64 end_time = 2;</code>
             * <p/>
             * <pre>
             * block duration (seconds)
             * </pre>
             */
            public Builder setEndTime(long value) {
                bitField0_ |= 0x00000002;
                endTime_ = value;

                return this;
            }

            /**
             * <code>optional int64 end_time = 2;</code>
             * <p/>
             * <pre>
             * block duration (seconds)
             * </pre>
             */
            public Builder clearEndTime() {
                bitField0_ = (bitField0_ & ~0x00000002);
                endTime_ = 0L;

                return this;
            }

            private bt_active_type presentType_ = bt_active_type.oth_NOTWEAR;

            /**
             * <code>optional .bt_active_type present_type = 3;</code>
             * <p/>
             * <pre>
             * present type
             * </pre>
             */
            public boolean hasPresentType() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .bt_active_type present_type = 3;</code>
             * <p/>
             * <pre>
             * present type
             * </pre>
             */
            public bt_active_type getPresentType() {
                return presentType_;
            }

            /**
             * <code>optional .bt_active_type present_type = 3;</code>
             * <p/>
             * <pre>
             * present type
             * </pre>
             */
            public Builder setPresentType(bt_active_type value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                presentType_ = value;

                return this;
            }

            /**
             * <code>optional .bt_active_type present_type = 3;</code>
             * <p/>
             * <pre>
             * present type
             * </pre>
             */
            public Builder clearPresentType() {
                bitField0_ = (bitField0_ & ~0x00000004);
                presentType_ = bt_active_type.oth_NOTWEAR;

                return this;
            }

            private int energy_;

            /**
             * <code>optional uint32 energy = 4;</code>
             * <p/>
             * <pre>
             * energy
             * </pre>
             */
            public boolean hasEnergy() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional uint32 energy = 4;</code>
             * <p/>
             * <pre>
             * energy
             * </pre>
             */
            public int getEnergy() {
                return energy_;
            }

            /**
             * <code>optional uint32 energy = 4;</code>
             * <p/>
             * <pre>
             * energy
             * </pre>
             */
            public Builder setEnergy(int value) {
                bitField0_ |= 0x00000008;
                energy_ = value;

                return this;
            }

            /**
             * <code>optional uint32 energy = 4;</code>
             * <p/>
             * <pre>
             * energy
             * </pre>
             */
            public Builder clearEnergy() {
                bitField0_ = (bitField0_ & ~0x00000008);
                energy_ = 0;

                return this;
            }

            private int steps_;

            /**
             * <code>optional uint32 steps = 5;</code>
             * <p/>
             * <pre>
             * steps
             * </pre>
             */
            public boolean hasSteps() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional uint32 steps = 5;</code>
             * <p/>
             * <pre>
             * steps
             * </pre>
             */
            public int getSteps() {
                return steps_;
            }

            /**
             * <code>optional uint32 steps = 5;</code>
             * <p/>
             * <pre>
             * steps
             * </pre>
             */
            public Builder setSteps(int value) {
                bitField0_ |= 0x00000010;
                steps_ = value;

                return this;
            }

            /**
             * <code>optional uint32 steps = 5;</code>
             * <p/>
             * <pre>
             * steps
             * </pre>
             */
            public Builder clearSteps() {
                bitField0_ = (bitField0_ & ~0x00000010);
                steps_ = 0;

                return this;
            }

            private int distance_;

            /**
             * <code>optional uint32 distance = 6;</code>
             * <p/>
             * <pre>
             * distances
             * </pre>
             */
            public boolean hasDistance() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>optional uint32 distance = 6;</code>
             * <p/>
             * <pre>
             * distances
             * </pre>
             */
            public int getDistance() {
                return distance_;
            }

            /**
             * <code>optional uint32 distance = 6;</code>
             * <p/>
             * <pre>
             * distances
             * </pre>
             */
            public Builder setDistance(int value) {
                bitField0_ |= 0x00000020;
                distance_ = value;

                return this;
            }

            /**
             * <code>optional uint32 distance = 6;</code>
             * <p/>
             * <pre>
             * distances
             * </pre>
             */
            public Builder clearDistance() {
                bitField0_ = (bitField0_ & ~0x00000020);
                distance_ = 0;

                return this;
            }

            private int swings_;

            /**
             * <code>optional uint32 swings = 7;</code>
             * <p/>
             * <pre>
             * swings
             * </pre>
             */
            public boolean hasSwings() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>optional uint32 swings = 7;</code>
             * <p/>
             * <pre>
             * swings
             * </pre>
             */
            public int getSwings() {
                return swings_;
            }

            /**
             * <code>optional uint32 swings = 7;</code>
             * <p/>
             * <pre>
             * swings
             * </pre>
             */
            public Builder setSwings(int value) {
                bitField0_ |= 0x00000040;
                swings_ = value;

                return this;
            }

            /**
             * <code>optional uint32 swings = 7;</code>
             * <p/>
             * <pre>
             * swings
             * </pre>
             */
            public Builder clearSwings() {
                bitField0_ = (bitField0_ & ~0x00000040);
                swings_ = 0;

                return this;
            }

            private int cycles_;

            /**
             * <code>optional uint32 cycles = 8;</code>
             * <p/>
             * <pre>
             * cycles
             * </pre>
             */
            public boolean hasCycles() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>optional uint32 cycles = 8;</code>
             * <p/>
             * <pre>
             * cycles
             * </pre>
             */
            public int getCycles() {
                return cycles_;
            }

            /**
             * <code>optional uint32 cycles = 8;</code>
             * <p/>
             * <pre>
             * cycles
             * </pre>
             */
            public Builder setCycles(int value) {
                bitField0_ |= 0x00000080;
                cycles_ = value;

                return this;
            }

            /**
             * <code>optional uint32 cycles = 8;</code>
             * <p/>
             * <pre>
             * cycles
             * </pre>
             */
            public Builder clearCycles() {
                bitField0_ = (bitField0_ & ~0x00000080);
                cycles_ = 0;

                return this;
            }

            private int systemFlag_;

            /**
             * <code>optional uint32 system_flag = 9;</code>
             * <p/>
             * <pre>
             * bong or not charge or not
             * </pre>
             */
            public boolean hasSystemFlag() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>optional uint32 system_flag = 9;</code>
             * <p/>
             * <pre>
             * bong or not charge or not
             * </pre>
             */
            public int getSystemFlag() {
                return systemFlag_;
            }

            /**
             * <code>optional uint32 system_flag = 9;</code>
             * <p/>
             * <pre>
             * bong or not charge or not
             * </pre>
             */
            public Builder setSystemFlag(int value) {
                bitField0_ |= 0x00000100;
                systemFlag_ = value;

                return this;
            }

            /**
             * <code>optional uint32 system_flag = 9;</code>
             * <p/>
             * <pre>
             * bong or not charge or not
             * </pre>
             */
            public Builder clearSystemFlag() {
                bitField0_ = (bitField0_ & ~0x00000100);
                systemFlag_ = 0;

                return this;
            }

            // @@protoc_insertion_point(builder_scope:bt_block)
        }

        static {
            defaultInstance = new bt_block(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:bt_block)
    }

    public interface bt_curveOrBuilder extends
            // @@protoc_insertion_point(interface_extends:bt_curve)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional int64 time = 1;</code>
         * <p/>
         * <pre>
         * time from block start
         * </pre>
         */
        boolean hasTime();

        /**
         * <code>optional int64 time = 1;</code>
         * <p/>
         * <pre>
         * time from block start
         * </pre>
         */
        long getTime();

        /**
         * <code>optional uint32 steps = 2;</code>
         * <p/>
         * <pre>
         * number of steps
         * </pre>
         */
        boolean hasSteps();

        /**
         * <code>optional uint32 steps = 2;</code>
         * <p/>
         * <pre>
         * number of steps
         * </pre>
         */
        int getSteps();

        /**
         * <code>optional uint32 swings = 3;</code>
         * <p/>
         * <pre>
         * number of swings
         * </pre>
         */
        boolean hasSwings();

        /**
         * <code>optional uint32 swings = 3;</code>
         * <p/>
         * <pre>
         * number of swings
         * </pre>
         */
        int getSwings();

        /**
         * <code>optional uint32 amp = 4;</code>
         * <p/>
         * <pre>
         * y axis data
         * </pre>
         */
        boolean hasAmp();

        /**
         * <code>optional uint32 amp = 4;</code>
         * <p/>
         * <pre>
         * y axis data
         * </pre>
         */
        int getAmp();

        /**
         * <code>optional uint32 heart_rate = 5;</code>
         * <p/>
         * <pre>
         * heartRate
         * </pre>
         */
        boolean hasHeartRate();

        /**
         * <code>optional uint32 heart_rate = 5;</code>
         * <p/>
         * <pre>
         * heartRate
         * </pre>
         */
        int getHeartRate();
    }

    /**
     * Protobuf type {@code bt_curve}
     */
    public static final class bt_curve extends
            com.google.protobuf.GeneratedMessageLite implements
            // @@protoc_insertion_point(message_implements:bt_curve)
            bt_curveOrBuilder {
        // Use bt_curve.newBuilder() to construct.
        private bt_curve(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private bt_curve(boolean noInit) {
            this.unknownFields = com.google.protobuf.ByteString.EMPTY;
        }

        private static final bt_curve defaultInstance;

        public static bt_curve getDefaultInstance() {
            return defaultInstance;
        }

        public bt_curve getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.ByteString unknownFields;

        private bt_curve(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.ByteString.Output unknownFieldsOutput =
                    com.google.protobuf.ByteString.newOutput();
            com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
                    com.google.protobuf.CodedOutputStream.newInstance(
                            unknownFieldsOutput);
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            time_ = input.readInt64();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            steps_ = input.readUInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            swings_ = input.readUInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            amp_ = input.readUInt32();
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            heartRate_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                try {
                    unknownFieldsCodedOutput.flush();
                } catch (java.io.IOException e) {
                    // Should not happen
                } finally {
                    unknownFields = unknownFieldsOutput.toByteString();
                }
                makeExtensionsImmutable();
            }
        }

        public static com.google.protobuf.Parser<bt_curve> PARSER =
                new com.google.protobuf.AbstractParser<bt_curve>() {
                    public bt_curve parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new bt_curve(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<bt_curve> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int TIME_FIELD_NUMBER = 1;
        private long time_;

        /**
         * <code>optional int64 time = 1;</code>
         * <p/>
         * <pre>
         * time from block start
         * </pre>
         */
        public boolean hasTime() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional int64 time = 1;</code>
         * <p/>
         * <pre>
         * time from block start
         * </pre>
         */
        public long getTime() {
            return time_;
        }

        public static final int STEPS_FIELD_NUMBER = 2;
        private int steps_;

        /**
         * <code>optional uint32 steps = 2;</code>
         * <p/>
         * <pre>
         * number of steps
         * </pre>
         */
        public boolean hasSteps() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint32 steps = 2;</code>
         * <p/>
         * <pre>
         * number of steps
         * </pre>
         */
        public int getSteps() {
            return steps_;
        }

        public static final int SWINGS_FIELD_NUMBER = 3;
        private int swings_;

        /**
         * <code>optional uint32 swings = 3;</code>
         * <p/>
         * <pre>
         * number of swings
         * </pre>
         */
        public boolean hasSwings() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional uint32 swings = 3;</code>
         * <p/>
         * <pre>
         * number of swings
         * </pre>
         */
        public int getSwings() {
            return swings_;
        }

        public static final int AMP_FIELD_NUMBER = 4;
        private int amp_;

        /**
         * <code>optional uint32 amp = 4;</code>
         * <p/>
         * <pre>
         * y axis data
         * </pre>
         */
        public boolean hasAmp() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional uint32 amp = 4;</code>
         * <p/>
         * <pre>
         * y axis data
         * </pre>
         */
        public int getAmp() {
            return amp_;
        }

        public static final int HEART_RATE_FIELD_NUMBER = 5;
        private int heartRate_;

        /**
         * <code>optional uint32 heart_rate = 5;</code>
         * <p/>
         * <pre>
         * heartRate
         * </pre>
         */
        public boolean hasHeartRate() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional uint32 heart_rate = 5;</code>
         * <p/>
         * <pre>
         * heartRate
         * </pre>
         */
        public int getHeartRate() {
            return heartRate_;
        }

        private void initFields() {
            time_ = 0L;
            steps_ = 0;
            swings_ = 0;
            amp_ = 0;
            heartRate_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt64(1, time_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, steps_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeUInt32(3, swings_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeUInt32(4, amp_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeUInt32(5, heartRate_);
            }
            output.writeRawBytes(unknownFields);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(1, time_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, steps_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, swings_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, amp_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(5, heartRate_);
            }
            size += unknownFields.size();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static bt_curve parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static bt_curve parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static bt_curve parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static bt_curve parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static bt_curve parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static bt_curve parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static bt_curve parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static bt_curve parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static bt_curve parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static bt_curve parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(bt_curve prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        /**
         * Protobuf type {@code bt_curve}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        bt_curve, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:bt_curve)
                bt_curveOrBuilder {
            // Construct using BtAlg.bt_curve.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                time_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000001);
                steps_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                swings_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                amp_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                heartRate_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public bt_curve getDefaultInstanceForType() {
                return bt_curve.getDefaultInstance();
            }

            public bt_curve build() {
                bt_curve result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public bt_curve buildPartial() {
                bt_curve result = new bt_curve(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.time_ = time_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.steps_ = steps_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.swings_ = swings_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.amp_ = amp_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.heartRate_ = heartRate_;
                result.bitField0_ = to_bitField0_;
                return result;
            }

            public Builder mergeFrom(bt_curve other) {
                if (other == bt_curve.getDefaultInstance()) return this;
                if (other.hasTime()) {
                    setTime(other.getTime());
                }
                if (other.hasSteps()) {
                    setSteps(other.getSteps());
                }
                if (other.hasSwings()) {
                    setSwings(other.getSwings());
                }
                if (other.hasAmp()) {
                    setAmp(other.getAmp());
                }
                if (other.hasHeartRate()) {
                    setHeartRate(other.getHeartRate());
                }
                setUnknownFields(
                        getUnknownFields().concat(other.unknownFields));
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                bt_curve parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (bt_curve) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private long time_;

            /**
             * <code>optional int64 time = 1;</code>
             * <p/>
             * <pre>
             * time from block start
             * </pre>
             */
            public boolean hasTime() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional int64 time = 1;</code>
             * <p/>
             * <pre>
             * time from block start
             * </pre>
             */
            public long getTime() {
                return time_;
            }

            /**
             * <code>optional int64 time = 1;</code>
             * <p/>
             * <pre>
             * time from block start
             * </pre>
             */
            public Builder setTime(long value) {
                bitField0_ |= 0x00000001;
                time_ = value;

                return this;
            }

            /**
             * <code>optional int64 time = 1;</code>
             * <p/>
             * <pre>
             * time from block start
             * </pre>
             */
            public Builder clearTime() {
                bitField0_ = (bitField0_ & ~0x00000001);
                time_ = 0L;

                return this;
            }

            private int steps_;

            /**
             * <code>optional uint32 steps = 2;</code>
             * <p/>
             * <pre>
             * number of steps
             * </pre>
             */
            public boolean hasSteps() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint32 steps = 2;</code>
             * <p/>
             * <pre>
             * number of steps
             * </pre>
             */
            public int getSteps() {
                return steps_;
            }

            /**
             * <code>optional uint32 steps = 2;</code>
             * <p/>
             * <pre>
             * number of steps
             * </pre>
             */
            public Builder setSteps(int value) {
                bitField0_ |= 0x00000002;
                steps_ = value;

                return this;
            }

            /**
             * <code>optional uint32 steps = 2;</code>
             * <p/>
             * <pre>
             * number of steps
             * </pre>
             */
            public Builder clearSteps() {
                bitField0_ = (bitField0_ & ~0x00000002);
                steps_ = 0;

                return this;
            }

            private int swings_;

            /**
             * <code>optional uint32 swings = 3;</code>
             * <p/>
             * <pre>
             * number of swings
             * </pre>
             */
            public boolean hasSwings() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional uint32 swings = 3;</code>
             * <p/>
             * <pre>
             * number of swings
             * </pre>
             */
            public int getSwings() {
                return swings_;
            }

            /**
             * <code>optional uint32 swings = 3;</code>
             * <p/>
             * <pre>
             * number of swings
             * </pre>
             */
            public Builder setSwings(int value) {
                bitField0_ |= 0x00000004;
                swings_ = value;

                return this;
            }

            /**
             * <code>optional uint32 swings = 3;</code>
             * <p/>
             * <pre>
             * number of swings
             * </pre>
             */
            public Builder clearSwings() {
                bitField0_ = (bitField0_ & ~0x00000004);
                swings_ = 0;

                return this;
            }

            private int amp_;

            /**
             * <code>optional uint32 amp = 4;</code>
             * <p/>
             * <pre>
             * y axis data
             * </pre>
             */
            public boolean hasAmp() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional uint32 amp = 4;</code>
             * <p/>
             * <pre>
             * y axis data
             * </pre>
             */
            public int getAmp() {
                return amp_;
            }

            /**
             * <code>optional uint32 amp = 4;</code>
             * <p/>
             * <pre>
             * y axis data
             * </pre>
             */
            public Builder setAmp(int value) {
                bitField0_ |= 0x00000008;
                amp_ = value;

                return this;
            }

            /**
             * <code>optional uint32 amp = 4;</code>
             * <p/>
             * <pre>
             * y axis data
             * </pre>
             */
            public Builder clearAmp() {
                bitField0_ = (bitField0_ & ~0x00000008);
                amp_ = 0;

                return this;
            }

            private int heartRate_;

            /**
             * <code>optional uint32 heart_rate = 5;</code>
             * <p/>
             * <pre>
             * heartRate
             * </pre>
             */
            public boolean hasHeartRate() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional uint32 heart_rate = 5;</code>
             * <p/>
             * <pre>
             * heartRate
             * </pre>
             */
            public int getHeartRate() {
                return heartRate_;
            }

            /**
             * <code>optional uint32 heart_rate = 5;</code>
             * <p/>
             * <pre>
             * heartRate
             * </pre>
             */
            public Builder setHeartRate(int value) {
                bitField0_ |= 0x00000010;
                heartRate_ = value;

                return this;
            }

            /**
             * <code>optional uint32 heart_rate = 5;</code>
             * <p/>
             * <pre>
             * heartRate
             * </pre>
             */
            public Builder clearHeartRate() {
                bitField0_ = (bitField0_ & ~0x00000010);
                heartRate_ = 0;

                return this;
            }

            // @@protoc_insertion_point(builder_scope:bt_curve)
        }

        static {
            defaultInstance = new bt_curve(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:bt_curve)
    }


    static {
    }

    // @@protoc_insertion_point(outer_class_scope)
}
